# Tested on
#   Ubuntu 16.04 amd64/i386  (xenial)
#   Ubuntu 18.04 amd64       (bionic)
#
#  Does not work on Ubuntu 20.04 (mininet needs python2)
#
# Use Distrobuilder (see README.md) to create the LXC images
# Default output is Ubuntu 18.04 on x86_64 architucture
#

image:
  name: ubuntu-topotest
  distribution: ubuntu
  release: bionic
  description: |-
    Ubuntu {{ image.release }}
  architecture: x86_64

source:
  downloader: debootstrap
  same_as: gutsy
  url: http://archive.ubuntu.com/ubuntu
  keyserver: keyserver.ubuntu.com
  keys:
    - 0x790BC7277767219C42C86F933B4FE6ACC0B21F32

targets:
  lxc:
    create-message: |-
      You just created an {{ image.description }} container.

      User 'ci' with password-less sudo access is added.
      No default root or ci user password are set.

    config:
      - type: all
        before: 5
        content: |-
          lxc.include = LXC_TEMPLATE_CONFIG/ubuntu.common.conf

      - type: user
        before: 5
        content: |-
          lxc.include = LXC_TEMPLATE_CONFIG/ubuntu.userns.conf

      - type: all
        after: 4
        content: |-
          lxc.include = LXC_TEMPLATE_CONFIG/common.conf

          # For Ubuntu 14.04
          lxc.mount.entry = /sys/kernel/debug sys/kernel/debug none bind,optional 0 0
          lxc.mount.entry = /sys/kernel/security sys/kernel/security none bind,optional 0 0
          lxc.mount.entry = /sys/fs/pstore sys/fs/pstore none bind,optional 0 0
          lxc.mount.entry = mqueue dev/mqueue mqueue rw,relatime,create=dir,optional 0 0

          # Disable apparmor to be able to run mininet
          lxc.mount.auto = cgroup:mixed proc:rw sys:mixed
          lxc.apparmor.profile = unconfined

      - type: user
        after: 4
        content: |-
          lxc.include = LXC_TEMPLATE_CONFIG/userns.conf

          # For Ubuntu 14.04
          lxc.mount.entry = /sys/firmware/efi/efivars sys/firmware/efi/efivars none bind,optional 0 0
          lxc.mount.entry = /proc/sys/fs/binfmt_misc proc/sys/fs/binfmt_misc none bind,optional 0 0

      - type: all
        content: |-
          lxc.arch = {{ image.architecture_personality }}

files:

  - path: /etc/hostname
    generator: hostname

  - path: /etc/hosts
    generator: hosts

  - path: /etc/resolvconf/resolv.conf.d/original
    generator: remove

  - path: /etc/resolvconf/resolv.conf.d/tail
    generator: remove

  - path: /etc/machine-id
    generator: remove

  - path: /etc/netplan/10-lxc.yaml
    generator: dump
    content: |-
      network:
        version: 2
        ethernets:
          eth0: {dhcp4: true}
    releases:
    - artful
    - bionic
    - cosmic
    - disco
    - focal

  - path: /etc/network/interfaces
    generator: dump
    content: |-
      # This file describes the network interfaces available on your system
      # and how to activate them. For more information, see interfaces(5).

      # The loopback network interface
      auto lo
      iface lo inet loopback

      auto eth0
      iface eth0 inet dhcp
    releases:
    - trusty
    - xenial

  - path: /etc/init/lxc-tty.conf
    generator: upstart-tty
    releases:
    - trusty

  - name: meta-data
    generator: cloud-init
    variants:
    - cloud

  - name: network-config
    generator: cloud-init
    variants:
    - cloud

  - name: user-data
    generator: cloud-init
    variants:
    - cloud

  - name: vendor-data
    generator: cloud-init
    variants:
    - cloud

packages:
  manager: apt
  update: true
  cleanup: true

  repositories:
    - name: sources.list
      url: |-
        deb http://archive.ubuntu.com/ubuntu {{ image.release }} main restricted universe multiverse
        deb http://archive.ubuntu.com/ubuntu {{ image.release }}-updates main restricted universe multiverse
        deb http://security.ubuntu.com/ubuntu {{ image.release }}-security main restricted universe multiverse
      architectures:
        - amd64
        - i386

    - name: sources.list
      url: |-
        deb http://ports.ubuntu.com/ubuntu-ports {{ image.release }} main restricted universe multiverse
        deb http://ports.ubuntu.com/ubuntu-ports {{ image.release }}-updates main restricted universe multiverse
        deb http://ports.ubuntu.com/ubuntu-ports {{ image.release }}-security main restricted universe multiverse
      architectures:
        - armhf
        - arm64
        - powerpc
        - powerpc64
        - ppc64el

  sets:
    - packages:
      - apt-transport-https
      - curl
      - dnsutils
      - gdb
      - iproute2
      - libssh-4
      - iputils-ping
      - libc-ares2
      - libsnmp30
      - lsof
      - mininet
      - openssh-server
      - python-ipaddr
      - python-pip
      - patch
      - snmp
      action: install

    - packages:
      - gcc
      - geoip-database
      - perl
      - tcl-expect
      - tcl8.6
      - tex-common
      - texinfo
      - x11-common
      - xauth
      - xdg-utils
      - python-pytest
      action: remove

    - packages:
      - gcc-7
      - gcc-8
      action: remove
      releases:
        - bionic

actions:
  - trigger: post-update
    action: |-
      #!/bin/sh
      set -eux

      # Create the sudo group
      getent group sudo >/dev/null 2>&1 || groupadd --system sudo
      # Allow sudo group access without password
      sed -i 's/sudo\s\+ALL=(ALL:ALL)\s\+ALL/sudo   ALL=(ALL:ALL) NOPASSWD: ALL/g' /etc/sudoers

      # Create the ci user account (as part of sudo group)
      useradd --create-home -s /bin/bash -G sudo -U ci

  - trigger: post-packages
    action: |-
      #!/bin/sh
      set -eux

      # Make sure the locale is built and functional
      locale-gen en_US.UTF-8
      update-locale LANG=en_US.UTF-8

      # Disable OpenVSwitch startup - we provide our
      # own as part of the topotests
      systemctl disable openvswitch-switch
      rm -f /lib/systemd/system/ovsdb-server.service
      rm -f /lib/systemd/system/ovs-vswitchd.service
      rm -f /lib/systemd/system/openvswitch-switch.service

      # Upgrade PIP to current
      /usr/bin/pip install --upgrade pip

      # Install zipp 1.2.0 (newer fails on ARM)
      /usr/local/bin/pip install 'zipp==1.2.0'

      # Install pytest before v5 for mininet
      /usr/local/bin/pip install 'pytest'

      # Install ExaBGP 3.4.17 with PIP
      /usr/local/bin/pip install 'exabgp==3.4.17'
      useradd -d /var/run/exabgp/ -s /bin/false exabgp

      # Install scapy for topotests
      /usr/local/bin/pip install 'scapy'

      # Install pytest-html
      /usr/local/bin/pip install pytest-html
      
      # Cleanup underlying /run
      mount -o bind / /mnt
      rm -rf /mnt/run/*
      umount /mnt

      # Cleanup temporary shadow paths
      rm /etc/*-

      # Add builddate to /etc/lxc-config
      echo "lxc.buildtime=`date -u -Iseconds`" >> /etc/lxc-config
      echo "lxc.imagename={{ image.name }}" >> /etc/lxc-config
      echo "lxc.release={{ image.release }}" >> /etc/lxc-config
      echo "lxc.arch={{ image.architecture }}" >> /etc/lxc-config
      echo "lxc.distro={{ image.distribution }}" >> /etc/lxc-config
      echo "lxc.variant={{ image.variants }}" >> /etc/lxc-config
      echo "lxc.serial={{ image.serial }}" >> /etc/lxc-config
      echo "container.name={{ container.name }}" >> /etc/lxc-config
      echo "lxc.buildtime=`date -u -Iseconds`" >> /etc/lxc-config1

mappings:
  architecture_map: debian
